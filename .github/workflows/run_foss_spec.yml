name: Run Chatwoot CE spec
on:
  push:
    branches:
      # - develop
      - master
      - main
  # pull_request:
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-22.04
    # Add fail-fast control at job level
    strategy:
      fail-fast: false  # Continue running other jobs even if one fails
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ''
          POSTGRES_DB: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        # tmpfs makes DB faster by using RAM
        options: >-
          --mount type=tmpfs,destination=/var/lib/postgresql/data
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4

      - uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically

      - uses: actions/setup-node@v4
        with:
          node-version: 23
          cache: 'pnpm'

      - name: Install pnpm dependencies
        run: pnpm i

      - name: Strip enterprise code
        run: |
          rm -rf enterprise
          rm -rf spec/enterprise

      - name: Setup parallel databases
        run: |
          # Use parallel:setup which handles database creation and schema loading properly
          # First ensure clean state by dropping databases (ignore errors if they don't exist)
          bundle exec rake parallel:drop RAILS_ENV=test || true
          # Setup all parallel databases in one command to avoid race conditions
          bundle exec rake parallel:setup RAILS_ENV=test
        env:
          RAILS_ENV: test
          # Set to a reasonable number for GitHub Actions
          PARALLEL_TEST_PROCESSORS: 4

      # Frontend tests with parallel execution (Vitest runs tests in parallel by default)
      - name: Run frontend tests
        run: |
          # Vitest runs tests in parallel by default with worker threads
          # --reporter=verbose shows more detailed output
          # --run prevents watch mode
          pnpm run test:coverage --reporter=verbose --run
        continue-on-error: true  # Continue to backend tests even if frontend tests fail

      # Backend tests - now with true parallel execution
      - name: Run backend tests in parallel
        run: |
          # Use parallel_tests gem for true parallel execution
          # This will run tests across multiple processes using separate databases
          bundle exec rake parallel:spec
        continue-on-error: true  # Continue to upload logs even if tests fail
        env:
          NODE_OPTIONS: --openssl-legacy-provider
          # Control the number of parallel processes (defaults to number of CPU cores)
          PARALLEL_TEST_PROCESSORS: 4

      - name: Upload rails log folder
        uses: actions/upload-artifact@v4
        if: always()  # Always upload logs regardless of test results
        with:
          name: rails-log-folder
          path: log
